#+TITLE: Pengantar Full-Stack Web Developer
#+DESCRIPTION: Hal-hal yang perlu kamu ketahui sebelum menjadi seorang full-stack web developer
#+AUTHOR: Fikri Rahmat Nurhidayat
#+EMAIL: FikriRNurhidayat@gmail.com
#+DATE: <2022-02-05 Sat>

* Pendahuluan

Dalam kehidupan sehari-hari; sebagai manusia post-mo pastinya sudah akrab nih dengan yang namanya situs web atau biasa disebut sebagai /website/. Ya jelas dong, kita sebagai manusia post modern kan pasti apa-apa harus serba digital, sebagai contoh, kita ngobrol secara digital pake *Whatsapp*, kita meeting juga digital atau virtual pake *Google Meet*, kita seneng-seneng nonton film juga lewat bioskop digital pake *Netflix*. Tuh kan, sudah terbukti kalo kita ga pernah lepas dari yang namanya teknologi digital. Kegiatan-kegiatan diatas yang sudah disebutin itu semuanya adalah situs web (/website/). Situs web tersebut mempunyai layanan-layanan yang dapat kita akses dimana pun dan kapanpun oleh siapapun (/kind of/).

Pernah ga sih terbayang dibenak pembaca pertanyaan bikin situs web kayak gini dan gitu tuh gimana sih?. Kalau iya, tulisan ini tepat sekali untuk para pembaca, karena disini kita akan membahas tentang gambaran besar pengembangan situs web, secara spesifik adalah kita membahas salah satu profesi yang bertanggung dalam pengembangan situs web yaitu /full-stack web developer/. Tulisan ini akan membahas apa tugas dari seorang /full-stack web developer/, apa cakupan pekerjaannya, dan apa saja yang perlu dikuasai sehingga dapat membuat sebuah situs web yang dapat dinikmati manusia post modern di abad ke 21 dan era industri 4.0 ini.

* Apa itu situs web?

#+NAME: fig:BINAR
#+ATTR_HTML: :width 100% :alt "Binar Academy"
#+CAPTION: Contoh situs web yang mungkin pembaca pernah buka
[[../../../assets/images/pengantar-full-stack-web-developer/pendahuluan-binaracademy.com.png]]

Gambar diatas adalah gambar situs web yang mungkin pernah pembaca kunjungi sebelum bergabung ke Binar Academy. Jadi situs web itu adalah sebuah tempat menampung informasi yang dapat diakses menggunakan peramban web (/web browser/) dimana pun kalau situs web tersebut dibuat dengan domain publik. Informasi yang diterima di dalam situs web ini bentuknya berupa halaman situs web (/Page/). Contoh informasi yang ditampung di dalam binaracademy.com adalah informasi bagaimana cara agar dapat belajar di dalam Binar Academy, atau cara untuk menjadi partner di Binar Academy.

Eeits, tapi tidak selamanya situs web itu berfungsi untuk menampung informasi dan menampilkannya, situs web juga bisa digunakan untuk mengolah informasi yang diberikan pengunjung, sebagai contoh, membayar tagihan listrik, membuat akun, mengunggah foto KTP untuk melakukan pinjol tapi pakai KTP orang lain, dan sebagainya.

Pokoknya situs web modern sudah bisa dipake buat apa-apa lah, mulai dari ngegame, ngedate, nonton film, dengerin musik, baca manga, baca novel, baca artikel, baca manifesto, apapun deh yang bersifat digital.

Dari cara situs web memberikan informasi, situs web dapat dibagi menjadi dua jenis, yaitu:
- Situs web statis (/static website/)
- Situs web dinamis (/dynamic website/)

Yuk kita bahas apa sih kedua benda itu.

** Situs Web Statis (/static website/)

#+NAME: fig:SPOTIFY
#+ATTR_HTML: :width 100% :alt "Spotify for Developer"
#+CAPTION: Contoh situs web statis yang dibuat dengan teknologi bernama [[https://jekyllrb.com/][jekyll]]
[[../../../assets/images/pengantar-full-stack-web-developer/static-website-spotify.png]]

Situs web statis adalah sebuah situs web yang menyimpan halaman-halamannya di dalam sebuah server dengan format yang akan dikirim ke peramban web penggunanya. Situs web statis ini biasanya dibuat dengan menggunakan HTML, CSS dan Javascript saja. Karena situs web ini bersifat statis, artinya siapapun yang mengakses situs tersebut akan melihat informasi yang sama. Jadi kalo Budi ngebuka binaracademy.com itu udah pasti tampilannya sama kayak Rina yang ngebuka binaracademy.com di waktu yang sama.

Anggep aja situs web statis itu kayak kamu jajan di Indomaret, kamu dateng ke Indomaret buat beli Coca-Cola, nah kamu waktu di Indomaret kan cuma dateng ambil Coca-Cola terus bayar, udah kelar. Jadi dengan analogi itu, indomaret itu situs web statis, terus Coca-Cola itu halaman dari situs web statis itu tadi. Kamu ga perlu nungguin si Coca-Cola ini diproses dari pabrik ketika dirimu berkunjung ke Indomaret, kamu cuma nerima jadi aja.

Situs web statis ini cenderung lebih mudah untuk dikembangkan karena sudah banyak /tools/ yang dapat membantu pengembangan situs web statis, dan juga informasi yang ditampilkan di dalam situs web statis bukanlah sebuah informasi yang kompleks. Contoh-contoh tools yang dapat digunakan untuk membuat situs web statis adalah /Wordpress/, /Webflow/, /Squarespace/ dan sebagainya.

** Situs Web Dinamis (/dynamic website/)

#+NAME: fig:YOUTUBE
#+ATTR_HTML: :width 100% :alt "Youtube"
#+CAPTION: Contoh situs web dinamis
[[../../../assets/images/pengantar-full-stack-web-developer/dynamic-website-example.png]]

Situs web dinamis itu sebuah situs web yang halaman-halamannya akan dibuat dan diproses tampilannya ketika pengunjung sedang mengakses situs tersebut. Beda dengan situs web statis yang mana halamannya akan selalu seperti itu karena dibuat dan disimpan di dalam server dan akan diberikan ke pengunjung jika mengaksesnya. Situs web dinamis ini akan melakukan /render/ dari tiap halaman /on-demand/ berdasarkan permintaan pengunjung. Jadi kalo pengunjung membuka halaman utama dari Youtube, si Youtube ini akan membuat halaman indeks yang akan disajikan khusus buat pengunjung tersebut. Maka dari itu biasanya informasi halaman yang dilihat user A akan berbeda dengan user B meskipun halaman yang dibuka sama.

Anggep aja si situs web dinamis ini kayak nasi goreng gerobakan. Kamu dateng ke abang nasi gorengnya, terus yang kamu lakuin setelah itu adalah pesen nasi goreng. Ketika kamu pesen nasi goreng, kan nasi gorengnya ga ajaib langsung jadi, abangnya harus masakin dulu nasi gorengmu, terus kalo udah jadi baru disajiin ke kamu. Karena nasi gorengnya ini dimasak berdasarkan pesanan, artinya si abang nasi goreng ini bisa aja masak nasi goreng dengan perpaduan yang beda, kalo kamu suka pedes ya abangnya bakalan nambahin cabe lebih banyak di nasi gorengmu. Kalo kamu ga suka pedes ya abangnya waktu masak nasi gorengnya ya ga bakal nambahin cabe banyak-banyak.

Jadi dari analogi diatas, anggep aja si nasi goreng gerobakan ini adalah sebuah situs web dinamis, terus katakanlah abangnya ini adalah server dari nasi goreng gerobakan tadi. Terus nasi gorengmu ini adalah halaman dari situs web dinamis tadi. Pesenan nasi goreng pedes sama nasi goreng ga pedes tadi itu adalah /request/ ke server yang dilakukan oleh pengunjung situs web dinamis.

Nah karena ada peran server dalam melayani permintaan di situs web dinamis dan ada yang berperan untuk menampilkan informasi yang diminta, maka dari itu biasanya situs web dinamis ini dipecah menjadi dua bagian, yaitu /client side/ (Front-End), dan /server side/ (Back-End).

Karena ada dua bagian dari situs web dinamis, maka dari itu pengembangan situs web dinamis ini relatif lebih susah dibandingkan dengan situs web statis. Situs web dinamis ini biasanya digunakan untuk mengolah informasi yang sudah kompleks seperti manajemen keuangan, debit kredit, preferensi user dalam melihat video youtube, dan sebagainya. Yang mana informasi tersebut perlu diolah terlebih dahulu sebelum disajikan ke pengunjung.

Untuk membuat situs web dinamis, tidak banyak /tools/ yang dapat kita pakai selain bahasa pemrograman dan kerangka kerjanya.

* Apa itu front-end?

#+NAME: fig:Tukang Ngecat
#+ATTR_HTML: :alt "Pak de pak de ngecat" :align middle :width 50%
#+CAPTION: Contoh kerjaan front-end web developer
[[../../../assets/images/pengantar-full-stack-web-developer/front-end-tukang-ngecat.jpeg]]

Ketika kamu membuka sebuah situs web, semua hal yang dapat berinteraksi dengan kamu itulah yang dimanakan front-end. Yuk simak analogi dibawah ini:

#+BEGIN_QUOTE
Kamu sedang berkunjung ke sebuah restoran bernama mekdi. Nah di dalam restoran mekdi ini kan ada tempat makan, ada kasir, ada wastafel dan sebagainya, yang mana tiap benda-benda itu memiliki fungsinya masing-masing. Karena kamu berkunjung ke mekdi untuk makan, otomatis kamu akan langsung pergi ke kasirnya buat pesen makanan. Katakanlah kamu pesen paket Bikmek, dan abis itu pelayan mekdi bakal ngasih kamu nampan yang diatasnya ada minumanmu, bikmekmu, dan kentangmu. Kamu bawa nampanmu itu ke meja yang mau kamu duduki dan kamu makan disitu. Sebelum kamu makan pastinya kamu bakal cuci tangan, maka kamu pergi ke wastafel dan mencuci tanganmu disitu, dan kembali ke meja untuk memakan bikmekmu.
#+END_QUOTE

Dari analogi diatas, mulai dari meja, wastafel, dan kasir, itu semua merupakan /user interface/. Nah /user interface/ inilah yang juga kita sebut sebagai front-end. Kalau kita kembali lagi ke konsep situs web, apa yang dirimu lihat melalui peramban web itulah yang disebut sebagai front-end. Lalu, bikmek, air yang dipakai untuk mencuci tanganmu itu semua adalah data atau informasi yang disajikan melalui front-end. Secara garis besar, front-end adalah tampilan yang kamu lihat di dalam peramban web beserta interaksi-interaksi yang dapat kamu lakukan dalam tampilan tersebut. Contoh hal yang dapat berinteraksi dengan pengunjung di dalam situs web adalah tombol yang bisa ditekan, formulir yang dapat diisi, dan video yang bisa di-/pause/ dan sebagainya.

#+NAME: fig:Meme
#+ATTR_HTML: :alt "Two button meme" :align middle
#+CAPTION: Tombol yang diliat pria tersebut adalah bagian dari front-end
[[../../../assets/images/pengantar-full-stack-web-developer/front-end-meme.png]]

Sebenarnya istilah front-end ini sangat luas, tapi bisa kita sederhanakan dengan istilah /client/, yang artinya semua aplikasi atau semua hal yang dilihat oleh pengguna situs kita itu adalah /front-end/, baik itu aplikasi desktop, aplikasi mobile, situs web dan sebagainya.

Balik lagi nih ke analogi restoran tadi, kamu mungkin bertanya-tanya, lha terus yang masakin bikmekku tadi siapa? Terus wastafelnya bisa muncul air, airnya tuh dari mana? Tenang kawan, kita akan bahas bagian-bagian yang mengurusi itu semua di bagian berikutnya.

Aktor yang bertanggung jawab terhadap pembuatan front-end dari sebuah situs web adalah /front-end web developer/.

Tanpa adanya back-end pada sebuah situs web, maka situs web tersebut hanya akan menjadi situs web statis.

* Apa itu back-end?

#+NAME: fig:Kera Masak
#+ATTR_HTML: :alt "Kerjaan Back-End Developer" :align middle :width 50%
#+CAPTION: Contoh pekerjaan seorang back-end developer
[[../../../assets/images/pengantar-full-stack-web-developer/back-end-example-task.jpg]]

Back-End adalah bagian dari situs web yang berfungsi untuk mengolah informasi yang datang, dan menyajikan informasi tersebut ke front-end untuk diolah lagi agar menjadi sebuah tampilan. Back-End inilah yang bertugas untuk membuat informasi, dan menentukan informasi mana  yang cocok untuk ditampilkan oleh user A pada suatu halaman dan mana yang tidak cocok untuk ditampilkan oleh user B. Back-End juga bertanggung jawab dalam mengurus segala bisnis yang terjadi di dalam sebuah situs web, seperti menghubungi bank untuk menagih tagihan dari user A, memberikan notifikasi ke user A agar segera membayar tagihannya, memberi tahu user bahwa email yang ingin mereka daftarkan sudah terdaftar dan sebagainya. Back-End ini sangat abstrak, karena kamu sebagai seorang pengunjung tidak akan pernah melihatnya tanpa adanya Front-End. Yuk simak analogi dibawah ini:

#+BEGIN_QUOTE
Ketika kasir mekdi menerima pesananmu, mereka akan mencatat pesanan tersebut dan memberikannya ke bagian dapur. Catatan tersebut pastinya sudah ada format yang sudah ditentukan antara kasir dan bagian dapur agar mereka berdua tidak salah menangkap apa yang sedang dipesan oleh kamu. Setelah bagian dapur menerima pesanan dari kasir, maka mereka akan segera membuatkan pesanan bikmek dan minumanmu tadi. Mereka akan mencari bahan-bahan yang diperlukan untuk membuat sebuah bikmek. Mereka akan memanggang daging sapi yang nantinya akan menjadi bagian dari bikmek yang kamu pesan. Mereka juga akan mengiris kubis, bawang bombai yang akan disajikan juga di dalam bikmekmu. Setelah semua itu selesai dilakukan, bagian dapur akan memberikan pesananmu tadi ke kasir, agar kasir dapat menaruhnya di dalam nampan yang akan diberikan ke kamu. Kamu tidak perlu terlibat di dalam pembuatan bikmekmu, yang perlu kamu lakukan hanyalah menunggu sampai pesananmu siap disajikan, dan kamu tinggal makan.

Dan juga ketika kamu menggunakan wastafel untuk mencuci tangan, wastafel tersebut sudah tersambung ke dalam pengairan yang ada di sekitar restoran tersebut, kamu hanya perlu memutar tuas keran agar air tersebut keluar dan dapat kamu gunakan untuk mencuci tangan. Kamu tidak perlu tau bagaimana tukang pipa membuat saluran air sehingga dapat digunakan di dalam wastafel tersebut, yang perlu kamu lakukan hanyalah menarik atau memutar tuas keran, itu saja.
#+END_QUOTE

Berbeda dengan front-end yang mana dijalankan di dalam komputer atau gawai dari pengguna situs web, back-end dijalankan di dalam sebuah server yang melayani kebutuhan situs web tersebut. Maka dari itu, pengguna tidak akan pernah tahu apa yang terjadi di back-end, mereka hanya perlu tau tampilan yang ditampilkan di dalam peramban web saja.

Aktor yang bertanggung jawab terhadap pembuatan back-end dari sebuah situs web adalah /back-end web developer/.

* Lantas apa hubungannya dengan full-stack web developer?

#+NAME: fig:Tukang Nasi Goreng
#+ATTR_HTML: :alt "Kerjaan Full-Stack Web Developer" :align middle
#+CAPTION: Contoh kerjaan full-stack web developer
[[../../../assets/images/pengantar-full-stack-web-developer/full-stack-nasi-goreng.jpeg]]

Nah, sekarang kita sudah tahu nih ada bagian apa saja di dalam sebuah situs web, yaitu ada bagian back-end, dan ada bagian front-end. Dua bagian tersebut adalah yang menjadi cakupan pekerjaan dari seorang /full-stack web developer/.

Jadi, untuk menjadi seorang /full-stack web developer/, ia harus mempunyai keahlian di bidang back-end dan front-end.

/Full-Stack web developer/ itu kayak abang-abang yang jualan nasi goreng gerobakan. Abang-abang itu menerima pesanan dari kamu, terus dia juga yang masak pesanannya, dia juga yang menyajikan pesananannya dan dia juga yang nganter pesananannya ke kamu. Si abang-abang nasi goreng ini juga yang nyiapin tempat duduk buat kamu makan di tempat. Abang-abang nasi goreng ini juga yang nyuci piring setelah kamu selesai makan. Pokoknya semuanya yang terkait dagangan dia, dia yang ngurusin.

* Cakupan pekerjaan full-stack web developer

Kan tadi kita udah ngomongin kaitannya Back-End, Front-End dan Full-Stack Web Developer. Sekarang kita coba bahas lebih rinci cakupan pekerjaan full-stack web developer itu apa aja sih?

** Mengembangkan Server Side Application (Back-End)

Tentu saja dalam pengembangan back-end ini ada bagian-bagian yang lebih kecil yang bisa kita spesifikasikan sebagai tugas dari /full-stack web developer/. Bagian-bagian tersebut adalah:
- Database
- Web API
- Logika bisnis

Ketiga bagian ini termasuk tugas dari seorang /full-stack web developer/.

** Mengembangkan Client Side Application (Front-End)

Berlaku juga dengan pengembangan front-end, ada tugas-tugas yang lebih kecil yang bisa dispesifikasikan sebagai tugas dari seorang /full-stack web developer/. Tugas-tugas tersebut adalah:
- Slicing (Merubah desain halaman menjadi halaman sebenarnya dalam bentuk HTML, CSS, dan Javascript).
- Mengolah data/informasi dari back-end agar menjadi sebuah tampilan.
- Mengolah input dari user untuk dikirimkan ke back-end agar dapat diolah oleh back-end.

Ketiga tugas ini termasuk tugas dari seorang /full-stack web developer/.

* Keahlian seorang full stack web developer

Karena /full-stack web developer/ harus bisa back-end dan front-end, tentu saja, keahlian-keahlian dari back-end dan front-end harus mereka kuasai agar mereka bisa menjadi seorang /full-stack web developer/, apa saja sih keahlian-keahlian yang dibutuhkan?

** Keahlian di bidang front-end

Front-End adalah tentang bagaimana informasi ditampilkan ke peramban web dari pengguna situs web tersebut. Untuk membangun front-end sebuah situs web, diperlukan 3 unsur utama, yaitu HTML, CSS dan Javascript. Sebenarnya 3 hal itu saja sudah cukup untuk membangun front-end pada situs web, namun karena standar industri sudah berubah, maka diperlukan keahlian yang lebih spesifik agar pengembangan front-end lebih efektif, yaitu dengan menggunakan /framework/ populer. Dan juga, karena front-end dan back-end akan menjadi 2 aplikasi yang berbeda, maka untuk mengembangkan front-end, kita perlu tau bagaimana cara berkomunikasi dengan back-end, umumnya menggunakan HTTP sebagai protokol komunikasi.

Jadi untuk merangkum keahlian apa saja yang diperlukan untuk membangun front-end dapat dilihat dari daftar berikut:
- Menguasai penggunaan HTML
- Menguasai penggunaan CSS
- Paham akan bahasa pemrograman Javascript
- Paham akan salah satu /framework/ yang digunakan untuk membangun front-end, sebagai contoh: ReactJS, AngularJS, dan VueJS.
- Mengerti bagaimana protokol HTTP bekerja agar dapat berkomunikasi dengan back-end.

** Keahlian di bidang back-end

Untuk membangun back-end dari sebuah situs web ada banyak sekali opsi yang bisa dijadikan sebagai solusi dalam membangunnya. Namun kita coba abstraksikan kebutuhan-kebutuhan itu. Untuk membangun back-end, setidaknya diperlukan penguasaan salah satu bahasa pemrograman yang dapat dijalankan di dalam komputer secara langsung, sebagai contoh: Ruby, Node.js, dan sebagainya. Untuk membangun sebuah aplikasi back-end, sangat diperlukan pengetahuan tentang framework apa yang dapat digunakan dalam back-end tersebut, karena untuk membuat aplikasi back-end dari nol itu akan sangat melelahkan, dan akan sangat lama untuk dikembangkan. Dan juga karena tujuan adanya back-end adalah melakukan pengolahan informasi, maka informasi-informasi ini harus ditata dengan baik dan benar agar mudah diolah, maka dari itu untuk mengembangkan back-end diperlukan pengetahuan tentang database dan cara mengelola database.

Jadi untuk merangkum keahlian apa saja yang diperlukan untuk membangun back-end dapat dilihat dari daftar berikut:
- Menguasai salah satu bahasa pemrograman /native/ yang dapat berjalan di dalam komputer, sebagai contoh: Node.js
- Menguasai salah satu /framework/ untuk membuat aplikasi back-end, sebagai contoh: Express.js
- Menguasai pengunaan sistem pengelolaan database (/DBMS/), sebagai contoh: Postgresql
- Mengerti bagaimana protokol HTTP bekerja agar dapat merespon dengan baik apa yang dikomunikasikan oleh aplikasi front-end.

** Keahlian lainnya

Dalam mengembangkan sebuah situs web, tentu saja ada semacam SOP yang dapat kita gunakan. Dengan adanya SOP ini akan membuat kita lebih tertata dalam melakukan tugas-tugas kita dan menentukan apa sih definisi dari kelarnya sebuah tugas. Nah SOP di dalam pengembangan situs web ini biasa disebut sebagai /Software Development Lifecycle/. Jadi sebagai /developer/ secara umum, kita perlu memahami salah satu jenis framework /software development lifecycle/. Framework yang umum digunakan saat ini adalah *SCRUM*.

** Tech stack

Untuk mempermudah dalam mengotak-kotakkan keahlian dari seorang /full-stack web developer/, muncul istilah-istilah yang merepresentasikan seperangkat keahlian dari seorang /full-stack web developer/, yang mencakup front-end dan back-end.
Berikut daftar /tech stack/ yang populer untuk /full-stack web developer/:
- LAMP (Linux, Apache, MySQL, PHP/Perl/Python)
- MERN (MongoDB, ExpressJS, ReactJS, NodeJS)
- MEAN (MongoDB, ExpressJS, AngularJS, NodeJS)
- MEVN (MongoDB, ExpressJS, VueJS, NodeJS)
- Ruby on Rails
- Django
- Java Spring
- ASP.NET
* Learning Path

Kamu sudah membaca gambaran besar tentang /full-stack web development/, banyak kan yang perlu dipelajari? Agar pembelajaran lebih terarah, kamu dapat melihat diagram di bawah ini agar bisa menjadi milestone kalian dalam menjadi seorang /full-stack web developer/.

#+NAME: fig:Peta Konsep
#+ATTR_HTML: :alt "Peta konsep Full-Stack" :align middle
#+CAPTION: Peta konsep full-stack web developer secara garis besar
[[../../../assets/images/pengantar-full-stack-web-developer/full-stack-web-stack-part-1.png]]

#+NAME: fig:Peta Konsep - Front-End
#+ATTR_HTML: :alt "Peta konsep Front-End" :align middle
#+CAPTION: Peta konsep front-end
[[../../../assets/images/pengantar-full-stack-web-developer/full-stack-web-stack-part-3.png]]

#+NAME: fig:Peta Konsep - Back-End
#+ATTR_HTML: :alt "Peta konsep Back-End" :align middle
#+CAPTION: Peta konsep back-end
[[../../../assets/images/pengantar-full-stack-web-developer/full-stack-web-stack-part-2.png]]

* Kesimpulan

Jadi objek kerja utama dari seorang /full-stack web developer/ adalah situs web. Situs web dapat dipecah menjadi dua yaitu front-end dan back-end, yang mana kedua bagian tersebut menjadi tanggung jawab dari /full-stack web developer/ juga.

* Referensi
- [[https://www.lewagon.com/tech-jobs/web-development/full-stack-developer#:~:text=A%20Full%20Stack%20Developer%20is,Front%20End%2C%20or%20client%20side.&text=Designing%20user%20interactions%20on%20the,cross%2Dplatform%20compatibility%20and%20optimization][What is a full stack developer?]]
- [[https://roadmap.sh/front-end][Roadmap.sh - Front-End]]
- [[https://roadmap.sh/back-end][Roadmap.sh - Back-End]]
