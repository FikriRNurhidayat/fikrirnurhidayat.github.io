#+TITLE: Open API
#+AUTHOR: Fikri Rahmat Nurhidayat
#+EMAIL: fikrirnurhidayat@gmail.com
#+DATE: <2021-12-19 Sun>

* Pendahuluan

Ketika kita membuat sebuah remote API (Backend Web API) tentu saja kita perlu mendokumentasikannya, mulai dari operasi apa saja yang bisa kita jalankan melalui remote API tersebut, dan apa saja parameter yang dibutuhkan agar pengguna remote API kita dapat menjalankan operasi tersebut dengan baik. Biasanya, kita sebagai developer akan mendokumentasikan cara penggunaan remote API tersebut dengan menggunakan sebuah dokumen, baik itu PDF, README, Website, dan bentuk-bentuk dokumen yang lainnya.

[[../../../assets/images/open-api/FRONTEND-TO-BACKEND.png]]

Ada banyak cara untuk mendokumentasikan remote API (Backend Web API) kita, salah satu caranya adalah dengan menggunakan Open API Specification. Namun, sebelum kita bahas terkait Open API Specification, kita harus pahami kembali makna sebenarnya dari sebuah API itu apa sih.

* Apa itu API?

*API* atau /application programming interface/ adalah sebuah penghubung antar dua aplikasi, sebagai contoh adalah aplikasi frontend kita, dengan backend kita. Dimana API ini punya sederet operasi yang bisa kita panggil untuk menjalankan beberapa fungsi dari aplikasi backend kita. Sebagai pengguna dari API, kita tidak perlu tau implementasi dari API itu seperti apa, yang terpenting adalah, kita tau operasi ini tentang apa, parameternya seperti apa, dan hasil dari operasi ini apa, kita tidak perlu tau detail tentang bagaimana implementasinya. Familiar bukan? Ini yang bisa kita sebut sebagai abstraksi.

Berhubungan dengan apa yang kita pelajari di chapter-chapter sebelumnya, API yang kita bicarakan disini biasanya adalah sebuah remote API yang dapat kita panggil menggunakan protokol HTTP atau protokol yang mirip dengan HTTP (WebSocket dsb).

API biasa disebut sebagai sebuah *kontrak*, karena API biasa diasumsikan tidak akan pernah rusak, layaknya sebuah hukum, yang dimana ketika sudah ditetapkan aturan demikian, maka hampir tidak akan berubah, kecuali ketika diamandemen.

[[../../../assets/images/open-api/PROVIDER-CONSOOMER.png]]

Untuk merangkum definisi tentang API, secara singkat, kita bisa simpulkan sebagai berikut:
- Pihak yang menyediakan sebuah servis (contoh: login, register, dan logika bisnis lainnya) melalui API disebut sebagai *Provider* (biasa disebut sebagai Backend)
- Pihak yang meminta servis tersebut melalui API disebut sebagai *Consumer* (biasa disebut sebagai Frontend)

Wujud dari API biasanya adalah sebuah /function/, /method/ ataupun /endpoint/. Lantas bagaimana cara mengomunikasikan pemahaman tentang sebuah aplikasi backend Web API tuh punya endpoint apa aja sih? Salah satu solusinya adalah menggunakan Open API.

* Apa itu Open API?

Open API adalah sebuah deskripsi dari sebuah remote API yang biasanya dapat kita panggil menggunakan protokol HTTP atau protokol yang mirip dengan HTTP seperti WebSocket. Dimana deskripsi ini dapat dibaca oleh mesin, karena deskripsi ini ditulis dengan format JSON atau YAML, maka dari itu data tersebut dapat diurai oleh mesin dan dibaca sebagai sebuah /object/ di dalam sebuah program.

Jadi, ketika kita mendeskripsikan sebuah remote API menggunakan Open API, tidak hanya kita saja manusia, yang dapat membacanya, namun mesin juga dapat membacanya.

#+BEGIN_QUOTE
Terus apa keuntungan menggunakan Open API, dibanding kita mendokumentasikannya dengan dokumen seperti PDF atau README saja?
#+END_QUOTE

Keuntungan mendeskripsikan remote API menggunakan Open API adalah, kita dapat menggunakan banyak tools yang dapat membantu kita dalam pengembangan aplikasi kita, sebagai contoh adalah  *client codegen*, yang dapat membantu kita untuk membuat sebuah /library/ atau /SDK (software development kit)/ untuk mengonsumsi remote API yang kita buat yang nantinya digunakan oleh aplikasi frontend kita. Tentu saja ini akan mempercepat proses pengembangan web.

#+BEGIN_QUOTE
Untuk melihat lebih jauh lagi tentang tools-tools apa saja sih yang dapat kita gunakan dengan menggunakan Open API dapat dicek pada tautan berikut: https://openapi.tools/
#+END_QUOTE

Open API ini biasanya berbentuk file yang memiliki ektensi ~.json~ atau ~.yaml~, dimana konten di dalam file tersebut adalah properti atau atribut-atribut yang mendeskripsikan sebuah remote API yang ingin kita deskripsikan.

* Kenapa kita perlu menggunakan Open API?

[[https://imgs.xkcd.com/comics/api.png]]

Inti dari kenapa kita perlu menggunakan Open API adalah komunikasi, entah terhadap komputer, maupun sesama developer.

** Perencanaan API akan jauh lebih baik

#+ATTR_HTML: :width 50%
[[../../../assets/images/open-api/CLUELESS.png]]

Mungkin bisa direfleksikan dari proses kalian mengerjakan challenge-challenge sebelumnya, mungkin kalian akan /clueless/ ketika ingin membuat sebuah API. Nah, dengan membuat Open API Documentation-nya terlebih dahulu, proses pembuatan remote API (RESTful API) kalian akan jauh lebih terencana.

** Codegen mempermudah pengembangan /client side application/

#+ATTR_HTML: :width 50%
[[../../../assets/images/open-api/YES-HONEY.png]]

/API Contract/, meskipun janjinya tidak akan merusak implementasi yang sudah ada di /Client Side/ namun pada kenyataannya sering terjadi. Janji supaya perubahan tidak akan merusak implementasi yang sudah ada, atau /backward compatibility/ dari sebuah API di iklim startup sepertinya hanyalah distopia belaka. Nah maka dari itu, kita bisa gunakan Open API untuk membuat SDK secara otomatis dengan Codegen, dimana ketika ada perubahan kontrak di API, frontend developer (consumer) tidak perlu repot-repot mengimplementasi ulang cara /request/ ke API kita, mereka tinggal /generate/ ulang SDK tersebut, dan menyesuaikan cara penggunaannya di /Client Side Application (/Consumer)/

#+BEGIN_QUOTE
Things break and they break often
#+END_QUOTE

** Mock API akan mempercepat pengembangan aplikasi kita

[[../../../assets/images/open-api/CONVENTIONAL-DEVELOPMENT-LIFECYCLE.png]]

Diagram diatas menunjukkan bagaimana software development lifecycle ketika kita tidak menggunakan Open API Documentation dan sebuah Mock API. Integrasi aplikasi frontend ke aplikasi backend, akan sangat bergantung pada ketersediaannya API dari aplikasi backend terlebih dahulu. Artinya, frontend developer tidak bisa meneruskan pekerjaannya sampai aplikasi backend sudah siap untuk dipakai. Ini menyebabkan frontend development *sangat dependen* dengan suksesnya backend development.

Untungnya, problem ketergantungan tersebut sudah dipecahkan dengan adanya Open API Documentation, kenapa? Karena kita bisa membuat kode dengan /codegen/ untuk membuat sebuah aplikasi backend yang sudah mengimplementasikan API yang sudah didefinisikan pada dokumen Open API. Aplikasi ini biasa disebut sebagai Mock API.

#+ATTR_HTML: :width 75%
[[../../../assets/images/open-api/COOLER-DEVELOPMENT-LIFECYCLE.png]]

Selagi aplikasi frontend menggunakan Mock API dari backend, maka backend developer sedang membuat implementasi dari API tersebut, dan berjanji tidak akan membuatnya berbeda dari Mock API dari segi interface-nya (cara pakai). Maka dari itu, ketika aplikasi backend sudah siap untuk dikonsumsi, aplikasi frontend tinggal mengganti server URL yang akan mereka gunakan untuk memanggil API, dari yang awalnya server URL ke Mock API, menjadi server URL ke Backend API yang sebenarnya. Hal ini tentu saja akan mempercepat proses pengembangan aplikasi, karena frontend development tidak lagi dependen dengan siap tidaknya aplikasi backend yang sesungguhnya. Dan, sebagai backend developer, juga akan mendapatkan feedback lebih cepat dari sisi Interface-nya (Cara pakai, dan skema dari response-nya).

* Open API Specification

Oke, cukup ngomongin pendahuluannya, sekarang kita langsung bahas saja, apa sih yang membuat Open API itu *Open API*? Yang pertama adalah aturannya. Aturan dalam apa? Dalam mendeskripsikan sebuah remote API. Artinya, ketika kita ingin membuat deskripsi tentang sebuah remote API, ada kaidah-kaidah yang wajib kita ikuti di dalam menulis dokumennya.

Karena dokumen Open API ini berwujud ~json~ atau ~yaml~, pastinya deskripsi dari remote API kita nanti akan berbentuk /object/, yang memiliki atribut-atribut yang berkaitan dengan remote API. Apa saja sih atributnya? Dan struktur data dari /object/ tersebut nantinya akan seperti apa sih? Mari kita simak bagian-bagian selanjutnya.

#+BEGIN_QUOTE
Dokumen dibawah ini akan selalu berdasarkan Open API Specification versi 3.0.0, jika referensi ke versi 2.0.0 dibutuhkan, silahkan buka tautan berikut: https://swagger.io/specification/v2/
#+END_QUOTE

** Structure of Open API Document

Seperti yang sudah disebutkan pada bagian sebelumnya, dokumen Open API ini kan bermaksud agar bisa dibaca oleh mesin, maka dari itu, kita perlu menyimpan dokumen ini dalam bentuk yang dikenali mesin, yaitu dalam bentuk ~JSON~ dan ~YAML~. Karena bentuknya ~JSON~ atau ~YAML~, maka dari itu pastinya data yang kita simpan pada file tersebut akan berupa sebuah /object/, struktur dari /object/ tersebut merepresentasikan atau mendeskripsikan remote API kita, mulai dari apa sih nama remote API kita, siapa maintainernya, lisensinya apa dan sebagainya.
*** Syntax dari dokumen Open API

Seperti yang sudah disebutkan diatas, dokumen ini ditulis menggunakan ~YAML~ atau ~JSON~, berikut contoh kode ~YAML~:

#+BEGIN_SRC yaml
# Anything after a hash sign is a comment
anObject:
  aNumber: 42
  aString: This is a string
  aBoolean: true
  nothing: null
  arrayOfNumbers:
    - 1
    - 2
    - 3
#+END_SRC

Dan berikut contoh kode ~JSON~:

#+BEGIN_SRC js
{
  "anObject": {
    "aNumber": 42,
    "aString": "This is a string",
    "aBoolean": true,
    "nothing": null,
    "arrayOfNumbers": [
      1,
      2,
      3
    ]
  }
}
#+END_SRC

Pilihlah salah satu tipe dokumen ketika menulis dokumentasi menggunakan Open API, tapi yang sangat dianjurkan adalah dengan menggunakan ~YAML~, karena lebih manusiawi untuk dibaca.

*** The Open API Object

/Root object/ atau /object/ dengan level tertinggi di dalam dokumen ini kita sebut dengan /Open API Object/, dimana /object/ ini mendefinisikan metadata dari remote API yang ingin kita dokumentasikan. Object ini terdiri dari beberapa atribut berikut:

[[../../../assets/images/open-api/OPEN-API-OBJECT.png]]

- ~openapi~ dipakai untuk memberi tau, kita ingin menggunakan spesifikasi versi keberapa dari Open API Specification.
- ~info~ adalah sebuah /object/ yang berisi informasi terkait API yang dideskripsikan, berisi siapa author-nya, nama api-nya apa dan sebagainya.
- ~paths~ adalah sebuah /object/ yang digunakan untuk mendeskripsikan semua rute yang ada di dalam API yang dideskripsikan.

Berikut contoh dokumentasi minimal yang ditulis menggunakan ~YAML~:

#+BEGIN_SRC yaml
openapi: 3.0.0
info:
  title: Medium Blogging API
  version: 0.0.1
paths: {} # No endpoints defined
#+END_SRC

Dokumen tersebut sudah valid, namun tidak memberi tahu kita lebih tentang apa saja yang API yang disediakan, dan bagaimana cara memanggilnya. Maka dari itu kita perlu mendefinisikan operasi apa saja yang dapat dilakukan, yang mana akan kita bahas pada bagian berikutnya.

** API Endpoints

Dokumentasi API tidak akan berguna kalau di dalam dokumentasi tersebut tidak terdapat daftar operasi yang dapat dilakukan (endpoint). API Endpoint atau biasa disebut sebagai /route/ atau /operation/ disebut sebagai *Paths* di dalam OAS (Open API Specification), maka dari itu, untuk mendefinisikan sebuah endpoint, kita akan menulisnya dibawah /object/ bernama ~paths~.

#+ATTR_HTML: :width 100%
[[../../../assets/images/open-api/OPEN-API-OBJECT-TO-RESPONSE-OBJECT.png]]

*** The Paths Object

~paths~ adalah sebuah atribute dengan tipe data ~object~, dimana tiap atribut dari /object/ tersebut adalah sebuah string yang menandakan sebuah endpoint dari suatu API. Maka dari tiap atribut dari ~paths~ harus dimulai dengan ~/~ sebagai prefiks dari endpoint.

Berikut adalah contoh Open API Object dengan ~paths~:

#+BEGIN_SRC yaml
openapi: 3.0.0
info:
  title: Medium Blogging API
  version: 0.0.1
paths:
  /posts: {} # We can conclude that this API has path named /posts
  /posts/{id}: {} # Path with path parameter
#+END_SRC

Pada setiap atribut di dalam ~paths~ adalah sebuah ~PathItemObject~, dimana di dalam atribut tersebut, adalah sebuah /object/ yang mana atribut-atributnya adalah sebuah metode HTTP, baik itu ~GET~, ~POST~, ~PUT~, maupun ~DELETE~.

Penjelasan terkait ~PathItemObject~ ini akan dibahas pada bagian berikutnya.

*** The Path Item Object

~PathItemObject~ adalah sebuah /object/ yang berada pada sebuah atribut dari /object/ ~paths~, atribut dari /object/ ini adalah metode HTTP, baik itu ~GET~, ~POST~, ~PUT~, ~PATCH~, maupun ~DELETE~. Tiap atribut itulah yang menandakan adanya operasi di dalam sebuah API kita.

#+BEGIN_SRC yaml
openapi: 3.0.0
info:
  title: Medium Blogging API
  version: 0.0.1
paths:
  /posts:
    get: {}
    post: {}
  /posts/{id}:
    get: {}
    put: {}
    delete: {}
#+END_SRC

Dari dokumen diatas, dapat kita simpulkan bahwa /Medium Blogging API/ memiliki dua /path/ yaitu ~/posts~ dan ~/posts/{id}~, dimana, ~/posts~, memiliki 2 operasi, yaitu ~GET~, dan ~POST~, dan untuk ~/posts/{id}~, memiliki 3 operasi, yaitu ~DELETE~, ~PUT~, dan ~GET~. Dokumen diatas masih *belum valid*, karena tiap operasi wajib berisi ~OperationObject~, yang mana memiliki beberapa atribut yang wajib ada, seperti ~responses~ dan sebagainya.

** Response Body Message

Setiap operasi wajib mendeskripsikan hasil dari operasi tersebut, baik itu berupa /No Content/ maupun ada konten. Untuk mendeskripsikan sebuah /response/ dari sebuah operasi, kita perlu menambahkan atribut bernama ~responses~ ke dalam ~OperationObject~, dimana ~OperationObject~ ini berada di dalam ~PathItemObject~.

*** The Responses Object

Setiap operasi tentunya memiliki beberapa jenis /response/, seperti ~422~, ~400~, ~500~ atau ~200~, semua /response/ tentu dibedakan berdasarkan /HTTP Status Code/-nya, maka dari itu pada OAS, setiap operasi wajib mencantumkan setidaknya 1 jenis /response/ menggunakan /HTTP Status Code/ yang ditulis di dalam sebuah string sebagai nama atribut.

#+BEGIN_SRC yaml
openapi: 3.0.0
info:
  title: Medium Blogging API
  version: 0.0.1
paths:
  /posts:
    get:
      responses:
        "200": {}
    post:
      responses:
        "201": {}
        "400": {}
        "401": {}
        "422": {}
        "500": {}
  /posts/{id}:
    get:
      responses:
        "200": {}
        "403": {}
        "404": {}
    put:
      responses:
        "200": {}
        "400": {}
        "403": {}
        "404": {}
        "422": {}
    delete:
      responses:
        "204": {}
        "403": {}
        "404": {}
#+END_SRC

Dokumen diatas masih *belum valid*, karena tiap atribut di dalam ~ResponsesObject~, wajib memiliki atribut yang bernama ~description~, yang mana akan kita bahas pada bagian berikutnya.

*** The Response Object

~ResponseObject~ adalah sebuah /object/ yang digunakan dalam OAS untuk mendefinisikan seperti apa sih /response/ dari  sebuah operasi yang kita jalankan. /Object/ ini memiliki atribut yang wajib ada di dalamnya, yaitu ~description~, yang mana hanyalah deskripsi dari sebuah /response/, namun tidak menutup kemungkinan juga kita akan menambahkan skema dari /response body/ dari sebuah operasi.

#+BEGIN_SRC yaml
openapi: 3.0.0
info:
  title: Medium Blogging API
  version: 0.0.1
paths:
  /posts:
    get:
      responses:
        "200":
          description: List of post is retrieved
    post:
      responses:
        "201":
          description: New post is created
        "400":
          description: Cannot create post due to invalid request body schema
        "401":
          description: Cannot create post without authorized access
        "422":
          description: Cannot create post due to invalid request body value
        "500":
          description: Cannot create post because of an error on the server
  /posts/{id}:
    get:
      responses:
        "200":
          description: Post with specific id is retrieved
        "403":
          description: Cannot retrieve post with specific id with current access
        "404":
          description: Post does not found
    put:
      responses:
        "200":
          description: Post with specific id is updated
        "400":
          description: Cannot update post due to invalid request body schema
        "401":
          description: Cannot update post without authorized access
        "403":
          description: Cannot update post with current access
        "404":
          description: Post does not found
        "422":
          description: Cannot update post due to invalid request body value
        "500":
          description: Cannot update post because of an error on the server
    delete:
      responses:
        "204":
          description: Post with specific id is deleted
        "403":
          description: Cannot delete post with current access
        "404":
          description: Post does not found
#+END_SRC

Dokumen diatas masih *belum valid*, karena pada /path/ ~/paths/{id}~, terdapat /path parameter/, yang wajib kita deskripsikan di tiap operasi dibawahnya, namun kita kita menghiraukan ~/paths/{id}~, maka dokumen ini sudah valid, dengan catatan, kita belom mendeskripsikan, wujud dari /response body/ dari tiap operasi, dan wujud dari /request body/ dari tiap operasi yang membutuhkannya.

#+ATTR_HTML: :width 100%
[[../../../assets/images/open-api/RESPONSE-OBJECT.png]]

**** The Media Object

~MediaObject~ adalah sebuah /object/ yang memiliki atribut yang nama dari atribut tersebut adalah sebuah ~Content-Type~ dari sebuah /response/, berikut adalah contoh daftar ~Content-Type~ yang merupakan nama atribut dari ~MediaObject~:
- ~application/json~
- ~application/xml~
- ~text/html~
- ~text/plain~

Atribut-atribut tersebut memiliki nilai yang berupa ~MediaTypeObject~.

#+BEGIN_SRC yaml
openapi: 3.0.0
info:
  title: Medium Blogging API
  version: 0.0.1
paths:
  /posts:
    get:
      responses:
        "200":
          description: List of post is retrieved
          content:
            application/json: {}
    post:
      responses:
        "201":
          description: New post is created
          content:
            application/json: {}
        "400":
          description: Cannot create post due to invalid request body schema
          content:
            application/json: {}
        "401":
          description: Cannot create post without authorized access
          content:
            application/json: {}
        "422":
          description: Cannot create post due to invalid request body value
          content:
            application/json: {}
        "500":
          description: Cannot create post because of an error on the server
          content:
            application/json: {}
  /posts/{id}:
    get:
      responses:
        "200":
          description: Post with specific id is retrieved
          content:
            application/json: {}
        "403":
          description: Cannot retrieve post with specific id with current access
          content:
            application/json: {}
        "404":
          description: Post does not found
          content:
            application/json: {}
    put:
      responses:
        "200":
          description: Post with specific id is updated
          content:
            application/json: {}
        "400":
          description: Cannot update post due to invalid request body schema
          content:
            application/json: {}
        "401":
          description: Cannot update post without authorized access
          content:
            application/json: {}
        "403":
          description: Cannot update post with current access
          content:
            application/json: {}
        "404":
          description: Post does not found
          content:
            application/json: {}
        "422":
          description: Cannot update post due to invalid request body value
          content:
            application/json: {}
        "500":
          description: Cannot update post because of an error on the server
          content:
            application/json: {}
    delete:
      responses:
        "204":
          description: Post with specific id is deleted
          content:
            application/json: {}
        "403":
          description: Cannot delete post with current access
          content:
            application/json: {}
        "404":
          description: Post does not found
          content:
            application/json: {}
#+END_SRC

**** The Media Type Object

~MediaTypeObject~ adalah sebuah /object/ yang mendefinisikan bentuk ~response~-nya nanti seperti apa, /object/ ini memiliki atribut-atribut sebagai berikut:
- ~schema~ yang berisi definisi data, atribut ini wajib ada ketika kita membuat sebuah ~MediaTypeObject~
- ~example~ yang berisi  data
- ~examples~ yang berisi  data jika bentuk datanya berupa /array/
- ~encoding~ yang berisi  encoding dari data tersebut

#+BEGIN_SRC yaml
openapi: 3.0.0
info:
  title: Medium Blogging API
  version: 0.0.1
paths:
  /posts:
    get:
      responses:
        "200":
          description: List of post is retrieved
          content:
            application/json:
              schema: {}
    post:
      responses:
        "201":
          description: New post is created
          content:
            application/json:
              schema: {}
        "400":
          description: Cannot create post due to invalid request body schema
          content:
            application/json:
              schema: {}
        "401":
          description: Cannot create post without authorized access
          content:
            application/json:
              schema: {}
        "422":
          description: Cannot create post due to invalid request body value
          content:
            application/json:
              schema: {}
        "500":
          description: Cannot create post because of an error on the server
          content:
            application/json:
              schema: {}
  /posts/{id}:
    get:
      responses:
        "200":
          description: Post with specific id is retrieved
          content:
            application/json:
              schema: {}
        "403":
          description: Cannot retrieve post with specific id with current access
          content:
            application/json:
              schema: {}
        "404":
          description: Post does not found
          content:
            application/json:
              schema: {}
    put:
      responses:
        "200":
          description: Post with specific id is updated
          content:
            application/json:
              schema: {}
        "400":
          description: Cannot update post due to invalid request body schema
          content:
            application/json:
              schema: {}
        "401":
          description: Cannot update post without authorized access
          content:
            application/json:
              schema: {}
        "403":
          description: Cannot update post with current access
          content:
            application/json:
              schema: {}
        "404":
          description: Post does not found
          content:
            application/json:
              schema: {}
        "422":
          description: Cannot update post due to invalid request body value
          content:
            application/json:
              schema: {}
        "500":
          description: Cannot update post because of an error on the server
          content:
            application/json:
              schema: {}
    delete:
      responses:
        "204":
          description: Post with specific id is deleted
          content:
            application/json:
              schema: {}
        "403":
          description: Cannot delete post with current access
          content:
            application/json:
              schema: {}
        "404":
          description: Post does not found
          content:
            application/json:
              schema: {}
#+END_SRC

Atribut schema adalah sebuah ~SchemaObject~, yang mana atribut ini digunakan untuk mendefinisikan sebuah bentuk data dari sebuah /response/.

**** The Schema Object

~SchemaObject~ adalah sebuah object yang mana dibuat berdasarkan [[https://json-schema.org/][JSON Schema]], yang mana digunakan untuk mendefinisikan bagaimana bentuk data dari sebuah /object/. Karena atribut ini /compatible/ dengan /JSON Schema/, maka dari itu, ketika kita mendefinisikan sebuah skema di dalam Open API Documentation, kita bisa pasang beberapa tools yang dapat memvalidasi sebuah /object/ (parameter) apakah sudah sesuai dengan skema atau belum.

#+BEGIN_SRC yaml
openapi: 3.0.0
info:
  title: Medium Blogging API
  version: 0.0.1
paths:
  /posts:
    get:
      responses:
        "200":
          description: List of post is retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "OK"
                  data:
                    type: array
                    items:
                        type: object
                        properties:
                            id:
                                type: string
                                example: "bdaf6814-2e99-40d5-9c15-e0238a90c886"
                            title:
                                type: string
                                example: Industrial Society and It's Future
                            body:
                                type: string
                                example: |
                                    Lorem ipsum dolor sit amet,
                                    consectetur adipiscing elit.
                                    Nullam quis tristique dolor.
                                    Donec at vehicula urna. Fusce nec lacus placerat,
                                    dictum nulla quis, vehicula urna.
                                    Suspendisse dictum neque sapien,
                                    mollis semper quam tincidunt sit amet.
                                    Fusce ullamcorper, nisi id pharetra egestas,
                                    nisi libero ullamcorper mi,
                                    id consectetur enim arcu eget turpis.
                                    Fusce urna diam, elementum a diam non,
                                    efficitur tempus eros.
                                    Nam tincidunt orci vitae enim vulputate vehicula.
                                    Nullam commodo magna sed nulla efficitur,
                                    in gravida eros malesuada.
                                    Quisque vel turpis sed elit
                                    finibus luctus et sed leo.
                                    Etiam porta metus purus,
                                    in vulputate est accumsan a.
                                    Aenean pulvinar aliquam nunc,
                                    vel pharetra diam sodales in.
                            authorId:
                                type: string
                                example: "196508c4-495f-4d2e-898b-776fb3c1e8b4"
                            authorName:
                                type: string
                                example: "Ted Kaczynski"
                            authorAvatar:
                                type: string
                                example: "https://placekitten.com/200/200"
                            createdAt:
                                type: string
                                example: "2021-07-30 17:00:00 +0700"
                            updatedAt:
                                type: string
                                example: "2021-07-30 17:00:00 +0700"
    post:
      responses:
        "201":
          description: New post is created
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "OK"
                  data:
                    type: object
                    properties:
                        id:
                            type: string
                            example: "bdaf6814-2e99-40d5-9c15-e0238a90c886"
                        title:
                            type: string
                            example: Industrial Society and It's Future
                        body:
                            type: string
                            example: |
                                Lorem ipsum dolor sit amet,
                                consectetur adipiscing elit.
                                Nullam quis tristique dolor.
                                Donec at vehicula urna. Fusce nec lacus placerat,
                                dictum nulla quis, vehicula urna.
                                Suspendisse dictum neque sapien,
                                mollis semper quam tincidunt sit amet.
                                Fusce ullamcorper, nisi id pharetra egestas,
                                nisi libero ullamcorper mi,
                                id consectetur enim arcu eget turpis.
                                Fusce urna diam, elementum a diam non,
                                efficitur tempus eros.
                                Nam tincidunt orci vitae enim vulputate vehicula.
                                Nullam commodo magna sed nulla efficitur,
                                in gravida eros malesuada.
                                Quisque vel turpis sed elit
                                finibus luctus et sed leo.
                                Etiam porta metus purus,
                                in vulputate est accumsan a.
                                Aenean pulvinar aliquam nunc,
                                vel pharetra diam sodales in.
                        authorId:
                            type: string
                            example: "196508c4-495f-4d2e-898b-776fb3c1e8b4"
                        authorName:
                            type: string
                            example: "Ted Kaczynski"
                        authorAvatar:
                            type: string
                            example: "https://placekitten.com/200/200"
                        createdAt:
                            type: string
                            example: "2021-07-30 17:00:00 +0700"
                        updatedAt:
                            type: string
                            example: "2021-07-30 17:00:00 +0700"
        "400":
          description: Cannot create post due to invalid request body schema
          content:
            application/json:
              schema:
                type: object
                properties:
                    status:
                        type: string
                        example: "FAIL"
                    data:
                        type: object
                        properties:
                            name:
                                type: string
                                example: "BAD_REQUEST"
                            message:
                                type: string
                                example: "Missing field"
                            payload:
                                type: object
                                properties:
                                    params:
                                        type: object
                                        properties:
                                            title:
                                                type: string
                                                example: "is required"
        "401":
          description: Cannot create post without authorized access
          content:
            application/json:
              schema:
                type: object
                properties:
                    status:
                        type: string
                        example: "FAIL"
                    data:
                        type: object
                        properties:
                            name:
                                type: string
                                example: "UNAUTHORIZED"
                            message:
                                type: string
                                example: "Access token is invalid"
        "422":
          description: Cannot create post due to invalid request body value
          content:
            application/json:
              schema:
                type: object
                properties:
                    status:
                        type: string
                        example: "FAIL"
                    data:
                        type: object
                        properties:
                            name:
                                type: string
                                example: "UNPROCESSABLE_ENTITY"
                            message:
                                type: string
                                example: "Field has invalid value"
                            payload:
                                type: object
                                properties:
                                    title:
                                        type: string
                                        example: "max 32 character"
        "500":
          description: Cannot create post because of an error on the server
          content:
            application/json:
              schema:
                type: object
                properties:
                    status:
                        type: string
                        example: "ERROR"
                    data:
                        type: object
                        properties:
                            name:
                                type: string
                                example: "INTERNAL_SERVER_ERROR"
                            message:
                                type: string
                                example: "Something is error"
                            stack:
                                type: string
                                example: "app/controllers/postController.js:64"
#+END_SRC

Dokumen diatas *sudah valid*, namun kita masih perlu menambahkan bagaimana cara melakukan /request/ yang baik dan benar yang mana hal ini akan dibahas pada bagian berikutnya.

** Request Body and Parameter

Setiap kita menjalankan suatu operasi, tentunya ada beberapa operasi yang memerlukan input dari yang meminta operasi tersebut dijalankan, layaknya sebuah /function/ di dalam sebuah program, ketika kita memanggil sebuah /function/ terkadang /function/ tersebut meminta beberapa parameter. Begitu juga dengan sebuah API, setiap operasi di API, terkadang perlu parameter yang harus dikirim oleh /consumer/ dari API tersebut.

*** The Parameter Object

/Parameter object/ adalah sebuah /object/ yang kita gunakan untuk mendefinisikan parameter yang dapat kita kirim pada sebuah operasi. Biasanya, /object/ ini digunakan untuk mendefinisikan /path parameter/ dan /query parameter/ jika dalam sebuah endpoint membutuhkan kedua jenis parameter tersebut.

#+BEGIN_SRC yaml
openapi: 3.0.0
info:
  title: Medium Blogging API
  version: 0.0.1
paths:
  /posts:
    get:
      parameters:
        - in: query
          name: status
          description: The status of Posts
          required: false
          schema:
            type: string
            enum:
                - DRAFT
                - PUBLISHED
        - in: query
          name: page
          description: The page of list of posts
          required: false
          schema:
            type: integer
            example: 1
        - in: query
          name: per_page
          description: How much post will be listed on each page
          required: false
          schema:
            type: integer
            example: 10
      responses:
        "200":
          description: List of post is retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "OK"
                  meta:
                    type: object
                    properties:
                      page:
                        type: number
                        example: 1
                      per_page:
                        type: number
                        example: 10
                      total:
                        type: number
                        example: 100000
                  data:
                    type: object
                    properties:
                      posts:
                        type: array
                        items:
                            type: object
                            properties:
                                id:
                                    type: string
                                    example: "bdaf6814-2e99-40d5-9c15-e0238a90c886"
                                title:
                                    type: string
                                    example: Industrial Society and It's Future
                                body:
                                    type: string
                                    example: |
                                        Lorem ipsum dolor sit amet,
                                        consectetur adipiscing elit.
                                        Nullam quis tristique dolor.
                                        Donec at vehicula urna. Fusce nec lacus placerat,
                                        dictum nulla quis, vehicula urna.
                                        Suspendisse dictum neque sapien,
                                        mollis semper quam tincidunt sit amet.
                                        Fusce ullamcorper, nisi id pharetra egestas,
                                        nisi libero ullamcorper mi,
                                        id consectetur enim arcu eget turpis.
                                        Fusce urna diam, elementum a diam non,
                                        efficitur tempus eros.
                                        Nam tincidunt orci vitae enim vulputate vehicula.
                                        Nullam commodo magna sed nulla efficitur,
                                        in gravida eros malesuada.
                                        Quisque vel turpis sed elit
                                        finibus luctus et sed leo.
                                        Etiam porta metus purus,
                                        in vulputate est accumsan a.
                                        Aenean pulvinar aliquam nunc,
                                        vel pharetra diam sodales in.
                                authorId:
                                    type: string
                                    example: "196508c4-495f-4d2e-898b-776fb3c1e8b4"
                                authorName:
                                    type: string
                                    example: "Ted Kaczynski"
                                authorAvatar:
                                    type: string
                                    example: "https://placekitten.com/200/200"
                                createdAt:
                                    type: string
                                    example: "2021-07-30 17:00:00 +0700"
                                updatedAt:
                                    type: string
                                    example: "2021-07-30 17:00:00 +0700"
  /posts/{id}:
    get:
      parameters:
        - in: path
          name: id
          description: The status of Posts
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Post with specific id is retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "OK"
                  data:
                    type: object
                    properties:

                      id:
                          type: string
                          example: "bdaf6814-2e99-40d5-9c15-e0238a90c886"
                      title:
                          type: string
                          example: Industrial Society and It's Future
                      body:
                          type: string
                          example: |
                              Lorem ipsum dolor sit amet,
                              consectetur adipiscing elit.
                              Nullam quis tristique dolor.
                              Donec at vehicula urna. Fusce nec lacus placerat,
                              dictum nulla quis, vehicula urna.
                              Suspendisse dictum neque sapien,
                              mollis semper quam tincidunt sit amet.
                              Fusce ullamcorper, nisi id pharetra egestas,
                              nisi libero ullamcorper mi,
                              id consectetur enim arcu eget turpis.
                              Fusce urna diam, elementum a diam non,
                              efficitur tempus eros.
                              Nam tincidunt orci vitae enim vulputate vehicula.
                              Nullam commodo magna sed nulla efficitur,
                              in gravida eros malesuada.
                              Quisque vel turpis sed elit
                              finibus luctus et sed leo.
                              Etiam porta metus purus,
                              in vulputate est accumsan a.
                              Aenean pulvinar aliquam nunc,
                              vel pharetra diam sodales in.
                      authorId:
                          type: string
                          example: "196508c4-495f-4d2e-898b-776fb3c1e8b4"
                      authorName:
                          type: string
                          example: "Ted Kaczynski"
                      authorAvatar:
                          type: string
                          example: "https://placekitten.com/200/200"
                      createdAt:
                          type: string
                          example: "2021-07-30 17:00:00 +0700"
                      updatedAt:
                          type: string
                          example: "2021-07-30 17:00:00 +0700"
        "403":
          description: Cannot retrieve post with specific id with current access
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: String
                    example: FAIL
                  data:
                    type: object
                    properties:
                      name:
                        type: string
                        example: "FORBIDDEN"
                      message:
                        type: string
                        example: "Invalid Access Level"
        "404":
          description: Post does not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    example: "FORBIDDEN"
                  message:
                    type: string
                    example: "Cannot find post with id=1"
#+END_SRC

*** The Request Body Object

Selain /parameters/, kita juga dapat mendefinisikan sebuah /parameter/ lain yaitu /request body/. /Request body/ pastinya hanya akan dipakai di dalam 3  jenis operasi saja, ~POST~, ~PUT~, dan ~PATCH~. /Object/ ini disimpan di dalam atribut yang bernama ~requestBody~ di dalam sebuah /Operation Object./

#+BEGIN_SRC yaml
openapi: 3.0.0
info:
  title: Medium Blogging API
  version: 0.0.1
paths:
  /posts:
    post:
      requestBody:
        description: Payload for making a Post
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                    type: string
                    example: Industrial Society and It's Future
                body:
                    type: string
                    example: |
                        Lorem ipsum dolor sit amet,
                        consectetur adipiscing elit.
                        Nullam quis tristique dolor.
                        Donec at vehicula urna. Fusce nec lacus placerat,
                        dictum nulla quis, vehicula urna.
                        Suspendisse dictum neque sapien,
                        mollis semper quam tincidunt sit amet.
                        Fusce ullamcorper, nisi id pharetra egestas,
                        nisi libero ullamcorper mi,
                        id consectetur enim arcu eget turpis.
                        Fusce urna diam, elementum a diam non,
                        efficitur tempus eros.
                        Nam tincidunt orci vitae enim vulputate vehicula.
                        Nullam commodo magna sed nulla efficitur,
                        in gravida eros malesuada.
                        Quisque vel turpis sed elit
                        finibus luctus et sed leo.
                        Etiam porta metus purus,
                        in vulputate est accumsan a.
                        Aenean pulvinar aliquam nunc,
                        vel pharetra diam sodales in.

      responses:
        "201":
          description: Post is created
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "OK"
                  data:
                    type: object
                    properties:
                        id:
                            type: string
                            example: "bdaf6814-2e99-40d5-9c15-e0238a90c886"
                        title:
                            type: string
                            example: Industrial Society and It's Future
                        body:
                            type: string
                            example: |
                                Lorem ipsum dolor sit amet,
                                consectetur adipiscing elit.
                                Nullam quis tristique dolor.
                                Donec at vehicula urna. Fusce nec lacus placerat,
                                dictum nulla quis, vehicula urna.
                                Suspendisse dictum neque sapien,
                                mollis semper quam tincidunt sit amet.
                                Fusce ullamcorper, nisi id pharetra egestas,
                                nisi libero ullamcorper mi,
                                id consectetur enim arcu eget turpis.
                                Fusce urna diam, elementum a diam non,
                                efficitur tempus eros.
                                Nam tincidunt orci vitae enim vulputate vehicula.
                                Nullam commodo magna sed nulla efficitur,
                                in gravida eros malesuada.
                                Quisque vel turpis sed elit
                                finibus luctus et sed leo.
                                Etiam porta metus purus,
                                in vulputate est accumsan a.
                                Aenean pulvinar aliquam nunc,
                                vel pharetra diam sodales in.
                        authorId:
                            type: string
                            example: "196508c4-495f-4d2e-898b-776fb3c1e8b4"
                        authorName:
                            type: string
                            example: "Ted Kaczynski"
                        authorAvatar:
                            type: string
                            example: "https://placekitten.com/200/200"
                        createdAt:
                            type: string
                            example: "2021-07-30 17:00:00 +0700"
                        updatedAt:
                            type: string
                            example: "2021-07-30 17:00:00 +0700"
        "401":
          description: Cannot create post without a granted access
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: String
                    example: FAIL
                  data:
                    type: object
                    properties:
                      name:
                        type: string
                        example: "UNAUTHORIZED"
                      message:
                        type: string
                        example: "Access is not granted"
#+END_SRC

** Components

Ada beberapa /object/ yang kita buat berulang-ulang, ketika kita mendefinisikan sebuah /Open API documentation/. Seperti bentuk /response/, /request body/, dan sebagainya. Untuk mengurangi perulangan dalam membuat /object/ yang sama, kita dapat menggunakan ~components~, dimana ~components~ ini akan diletakkan pada /Open API Object/ dengan atribut bernama ~components~. Ada 4 jenis ~components~, yaitu:
- ~schemas~
- ~requestBodies~
- ~responses~
- ~securitySchemes~

*** The Schema Object

/Schema Object/ adalah sebuah /object/ yang mana tiap atributnya adalah jenis /schema/ yang dapat kita gunakan ketika kita membutuhkan /schema/ di dalam sebuah /operation/.

#+BEGIN_SRC yaml
openapi: 3.0.0
info:
  title: Medium Blogging API
  version: 0.0.1
paths:
  /posts:
    get:
      parameters:
        - in: query
          name: status
          description: The status of Posts
          required: false
          schema:
            type: string
            enum:
                - DRAFT
                - PUBLISHED
        - in: query
          name: page
          description: The page of list of posts
          required: false
          schema:
            type: integer
            example: 1
        - in: query
          name: per_page
          description: How much post will be listed on each page
          required: false
          schema:
            type: integer
            example: 10
      responses:
        "200":
          description: List of post is retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "OK"
                  meta:
                    type: object
                    properties:
                      page:
                        type: number
                        example: 1
                      per_page:
                        type: number
                        example: 10
                      total:
                        type: number
                        example: 100000
                  data:
                    type: object
                    properties:
                      posts:
                        type: array
                        items:
                          $ref: "#/components/schemas/Post"
    post:
      requestBody:
        description: Payload for making a Post
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                    type: string
                    example: Industrial Society and It's Future
                body:
                    type: string
                    example: |
                        Lorem ipsum dolor sit amet,
                        consectetur adipiscing elit.
                        Nullam quis tristique dolor.
                        Donec at vehicula urna. Fusce nec lacus placerat,
                        dictum nulla quis, vehicula urna.
                        Suspendisse dictum neque sapien,
                        mollis semper quam tincidunt sit amet.
                        Fusce ullamcorper, nisi id pharetra egestas,
                        nisi libero ullamcorper mi,
                        id consectetur enim arcu eget turpis.
                        Fusce urna diam, elementum a diam non,
                        efficitur tempus eros.
                        Nam tincidunt orci vitae enim vulputate vehicula.
                        Nullam commodo magna sed nulla efficitur,
                        in gravida eros malesuada.
                        Quisque vel turpis sed elit
                        finibus luctus et sed leo.
                        Etiam porta metus purus,
                        in vulputate est accumsan a.
                        Aenean pulvinar aliquam nunc,
                        vel pharetra diam sodales in.
      responses:
        "201":
          description: Post is created
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "OK"
                  data:
                    $ref: "#/components/schemas/Post"
        "401":
          description: Cannot update post without a granted access
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: String
                    example: FAIL
                  data:
                    type: object
                    properties:
                      name:
                        type: string
                        example: "UNAUTHORIZED"
                      message:
                        type: string
                        example: "Access is not granted"
components:
  schemas:
    Post:
      type: object
      properties:
        id:
            type: string
            example: "bdaf6814-2e99-40d5-9c15-e0238a90c886"
        title:
            type: string
            example: Industrial Society and It's Future
        body:
            type: string
            example: |
                Lorem ipsum dolor sit amet,
                consectetur adipiscing elit.
                Nullam quis tristique dolor.
                Donec at vehicula urna. Fusce nec lacus placerat,
                dictum nulla quis, vehicula urna.
                Suspendisse dictum neque sapien,
                mollis semper quam tincidunt sit amet.
                Fusce ullamcorper, nisi id pharetra egestas,
                nisi libero ullamcorper mi,
                id consectetur enim arcu eget turpis.
                Fusce urna diam, elementum a diam non,
                efficitur tempus eros.
                Nam tincidunt orci vitae enim vulputate vehicula.
                Nullam commodo magna sed nulla efficitur,
                in gravida eros malesuada.
                Quisque vel turpis sed elit
                finibus luctus et sed leo.
                Etiam porta metus purus,
                in vulputate est accumsan a.
                Aenean pulvinar aliquam nunc,
                vel pharetra diam sodales in.
        authorId:
            type: string
            example: "196508c4-495f-4d2e-898b-776fb3c1e8b4"
        authorName:
            type: string
            example: "Ted Kaczynski"
        authorAvatar:
            type: string
            example: "https://placekitten.com/200/200"
        createdAt:
            type: string
            example: "2021-07-30 17:00:00 +0700"
        updatedAt:
            type: string
            example: "2021-07-30 17:00:00 +0700"
#+END_SRC

Dokumen diatas, sudah menggunakan ~#/components/schemas/Post~, untuk mendefinisikan skema dari ~array~ di dalam

*** The Request Bodies Object

/Request Bodies Object/ adalah sebuah /object/ yang digunakan untuk mendefinisikan sebuah /request body/ yang dapat kita panggil pada sebuah operasi. /Request Bodies/ juga dapat menggunakan ~schemas~.

#+BEGIN_SRC yaml
openapi: 3.0.0
info:
  title: Medium Blogging API
  version: 0.0.1
paths:
  /posts:
    post:
      requestBody:
        $ref: "#/components/requestBodies/PostRequest"
      responses:
        "201":
          description: Post is created
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "OK"
                  data:
                    $ref: "#/components/schemas/Post"
        "401":
          description: Cannot create post without a granted access
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: FAIL
                  data:
                    type: object
                    properties:
                      name:
                        type: string
                        example: "UNAUTHORIZED"
                      message:
                        type: string
                        example: "Access is not granted"
  /posts/{id}:
    put:
      parameters:
        - in: path
          name: id
          description: The id of the Post
          required: true
          schema:
            type: number
            example: 1
      requestBody:
        $ref: "#/components/requestBodies/PostRequest"
      responses:
        "200":
          description: Post is updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "OK"
                  data:
                    $ref: "#/components/schemas/Post"
        "401":
          description: Cannot update post without a granted access
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: FAIL
                  data:
                    type: object
                    properties:
                      name:
                        type: string
                        example: "UNAUTHORIZED"
                      message:
                        type: string
                        example: "Access is not granted"
        "403":
          description: Cannot update post with specific id with current access
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: FAIL
                  data:
                    type: object
                    properties:
                      name:
                        type: string
                        example: "FORBIDDEN"
                      message:
                        type: string
                        example: "Invalid Access Level"
components:
  requestBodies:
    PostRequest:
        description: Payload for making a Post
        required: true
        content:
            application/json:
                schema:
                    type: object
                    properties:
                        title:
                            type: string
                            example: Industrial Society and It's Future
                        body:
                            type: string
                            example: |
                                Lorem ipsum dolor sit amet,
                                consectetur adipiscing elit.
                                Nullam quis tristique dolor.
                                Donec at vehicula urna. Fusce nec lacus placerat,
                                dictum nulla quis, vehicula urna.
                                Suspendisse dictum neque sapien,
                                mollis semper quam tincidunt sit amet.
                                Fusce ullamcorper, nisi id pharetra egestas,
                                nisi libero ullamcorper mi,
                                id consectetur enim arcu eget turpis.
                                Fusce urna diam, elementum a diam non,
                                efficitur tempus eros.
                                Nam tincidunt orci vitae enim vulputate vehicula.
                                Nullam commodo magna sed nulla efficitur,
                                in gravida eros malesuada.
                                Quisque vel turpis sed elit
                                finibus luctus et sed leo.
                                Etiam porta metus purus,
                                in vulputate est accumsan a.
                                Aenean pulvinar aliquam nunc,
                                vel pharetra diam sodales in.
  schemas:
    Post:
      type: object
      properties:
        id:
            type: string
            example: "bdaf6814-2e99-40d5-9c15-e0238a90c886"
        title:
            type: string
            example: Industrial Society and It's Future
        body:
            type: string
            example: |
                Lorem ipsum dolor sit amet,
                consectetur adipiscing elit.
                Nullam quis tristique dolor.
                Donec at vehicula urna. Fusce nec lacus placerat,
                dictum nulla quis, vehicula urna.
                Suspendisse dictum neque sapien,
                mollis semper quam tincidunt sit amet.
                Fusce ullamcorper, nisi id pharetra egestas,
                nisi libero ullamcorper mi,
                id consectetur enim arcu eget turpis.
                Fusce urna diam, elementum a diam non,
                efficitur tempus eros.
                Nam tincidunt orci vitae enim vulputate vehicula.
                Nullam commodo magna sed nulla efficitur,
                in gravida eros malesuada.
                Quisque vel turpis sed elit
                finibus luctus et sed leo.
                Etiam porta metus purus,
                in vulputate est accumsan a.
                Aenean pulvinar aliquam nunc,
                vel pharetra diam sodales in.
        authorId:
            type: string
            example: "196508c4-495f-4d2e-898b-776fb3c1e8b4"
        authorName:
            type: string
            example: "Ted Kaczynski"
        authorAvatar:
            type: string
            example: "https://placekitten.com/200/200"
        createdAt:
            type: string
            example: "2021-07-30 17:00:00 +0700"
        updatedAt:
            type: string
            example: "2021-07-30 17:00:00 +0700"
#+END_SRC

*** The Response Object

/Response Object/ adalah sebuah /object/ yang kita gunakan untuk membuat sebuah definisi /response/ dengan berbagai jenis tipe media yang bisa didefinisikan.

#+BEGIN_SRC yaml
openapi: 3.0.0
info:
  title: Medium Blogging API
  version: 0.0.1
paths:
  /posts:
    post:
      requestBody:
        $ref: "#/components/requestBodies/PostRequest"
      responses:
        "201":
          $ref: "#/components/responses/PostResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
  /posts/{id}:
    put:
      parameters:
        - in: path
          name: id
          description: The id of the Post
          required: true
          schema:
            type: number
            example: 1
      requestBody:
        $ref: "#/components/requestBodies/PostRequest"
      responses:
        "200":
          $ref: "#/components/responses/PostResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "403":
          $ref: "#/components/responses/ForbiddenResponse"
components:
  requestBodies:
    PostRequest:
        description: Payload for making a Post
        required: true
        content:
            application/json:
                schema:
                    type: object
                    properties:
                        title:
                            type: string
                            example: Industrial Society and It's Future
                        body:
                            type: string
                            example: |
                                Lorem ipsum dolor sit amet,
                                consectetur adipiscing elit.
                                Nullam quis tristique dolor.
                                Donec at vehicula urna. Fusce nec lacus placerat,
                                dictum nulla quis, vehicula urna.
                                Suspendisse dictum neque sapien,
                                mollis semper quam tincidunt sit amet.
                                Fusce ullamcorper, nisi id pharetra egestas,
                                nisi libero ullamcorper mi,
                                id consectetur enim arcu eget turpis.
                                Fusce urna diam, elementum a diam non,
                                efficitur tempus eros.
                                Nam tincidunt orci vitae enim vulputate vehicula.
                                Nullam commodo magna sed nulla efficitur,
                                in gravida eros malesuada.
                                Quisque vel turpis sed elit
                                finibus luctus et sed leo.
                                Etiam porta metus purus,
                                in vulputate est accumsan a.
                                Aenean pulvinar aliquam nunc,
                                vel pharetra diam sodales in.
  responses:
    ForbiddenResponse:
      description: Response when accessing protected endpoint with access but sufficient access
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: FAIL
              data:
                type: object
                properties:
                  name:
                    type: string
                    example: "FORBIDDEN"
                  message:
                    type: string
                    example: "Invalid access level"
    UnauthorizedResponse:
      description: Response when accessing protected endpoint without access
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: FAIL
              data:
                type: object
                properties:
                  name:
                    type: string
                    example: "UNAUTHORIZED"
                  message:
                    type: string
                    example: "Access is not granted"
    PostResponse:
      description: Response when mutating and get individual Post.
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: OK
              data:
                $ref: "#/components/schemas/Post"
  schemas:
    Post:
      type: object
      properties:
        id:
            type: string
            example: "bdaf6814-2e99-40d5-9c15-e0238a90c886"
        title:
            type: string
            example: Industrial Society and It's Future
        body:
            type: string
            example: |
                Lorem ipsum dolor sit amet,
                consectetur adipiscing elit.
                Nullam quis tristique dolor.
                Donec at vehicula urna. Fusce nec lacus placerat,
                dictum nulla quis, vehicula urna.
                Suspendisse dictum neque sapien,
                mollis semper quam tincidunt sit amet.
                Fusce ullamcorper, nisi id pharetra egestas,
                nisi libero ullamcorper mi,
                id consectetur enim arcu eget turpis.
                Fusce urna diam, elementum a diam non,
                efficitur tempus eros.
                Nam tincidunt orci vitae enim vulputate vehicula.
                Nullam commodo magna sed nulla efficitur,
                in gravida eros malesuada.
                Quisque vel turpis sed elit
                finibus luctus et sed leo.
                Etiam porta metus purus,
                in vulputate est accumsan a.
                Aenean pulvinar aliquam nunc,
                vel pharetra diam sodales in.
        authorId:
            type: string
            example: "196508c4-495f-4d2e-898b-776fb3c1e8b4"
        authorName:
            type: string
            example: "Ted Kaczynski"
        authorAvatar:
            type: string
            example: "https://placekitten.com/200/200"
        createdAt:
            type: string
            example: "2021-07-30 17:00:00 +0700"
        updatedAt:
            type: string
            example: "2021-07-30 17:00:00 +0700"
#+END_SRC

*** The Security Schemes Object

/Security Schemes Object/ digunakan untuk mendefinisikan sebuah security yang nantinya akan digunakan di dalam operasi. Untuk detail terkait ini dapat dilihat pada tautan berikut:

https://swagger.io/docs/specification/authentication/

Di dalam bagian ini, kita akan membuat sebuah ~securitySchemes~ yang memiliki ~Bearer Auth~ di dalamnya.

#+BEGIN_SRC yaml
openapi: 3.0.0
info:
  title: Medium Blogging API
  version: 0.0.1
paths:
  /posts:
    post:
      security:
        - BearerAuth: []
      requestBody:
        $ref: "#/components/requestBodies/PostRequest"
      responses:
        "201":
          $ref: "#/components/responses/PostResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
  /posts/{id}:
    put:
      parameters:
        - in: path
          name: id
          description: The id of the Post
          required: true
          schema:
            type: number
            example: 1
      security:
        - BearerAuth: []
      requestBody:
        $ref: "#/components/requestBodies/PostRequest"
      responses:
        "200":
          $ref: "#/components/responses/PostResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "403":
          $ref: "#/components/responses/ForbiddenResponse"
components:
  requestBodies:
    PostRequest:
        description: Payload for making a Post
        required: true
        content:
            application/json:
                schema:
                    type: object
                    properties:
                        title:
                            type: string
                            example: Industrial Society and It's Future
                        body:
                            type: string
                            example: |
                                Lorem ipsum dolor sit amet,
                                consectetur adipiscing elit.
                                Nullam quis tristique dolor.
                                Donec at vehicula urna. Fusce nec lacus placerat,
                                dictum nulla quis, vehicula urna.
                                Suspendisse dictum neque sapien,
                                mollis semper quam tincidunt sit amet.
                                Fusce ullamcorper, nisi id pharetra egestas,
                                nisi libero ullamcorper mi,
                                id consectetur enim arcu eget turpis.
                                Fusce urna diam, elementum a diam non,
                                efficitur tempus eros.
                                Nam tincidunt orci vitae enim vulputate vehicula.
                                Nullam commodo magna sed nulla efficitur,
                                in gravida eros malesuada.
                                Quisque vel turpis sed elit
                                finibus luctus et sed leo.
                                Etiam porta metus purus,
                                in vulputate est accumsan a.
                                Aenean pulvinar aliquam nunc,
                                vel pharetra diam sodales in.
  responses:
    ForbiddenResponse:
      description: Response when accessing protected endpoint with access but sufficient access
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: FAIL
              data:
                type: object
                properties:
                  name:
                    type: string
                    example: "FORBIDDEN"
                  message:
                    type: string
                    example: "Invalid access level"
    UnauthorizedResponse:
      description: Response when accessing protected endpoint without access
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: FAIL
              data:
                type: object
                properties:
                  name:
                    type: string
                    example: "UNAUTHORIZED"
                  message:
                    type: string
                    example: "Access is not granted"
    PostResponse:
      description: Response when mutating and get individual Post.
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: OK
              data:
                $ref: "#/components/schemas/Post"
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
  schemas:
    Post:
      type: object
      properties:
        id:
            type: string
            example: "bdaf6814-2e99-40d5-9c15-e0238a90c886"
        title:
            type: string
            example: Industrial Society and It's Future
        body:
            type: string
            example: |
                Lorem ipsum dolor sit amet,
                consectetur adipiscing elit.
                Nullam quis tristique dolor.
                Donec at vehicula urna. Fusce nec lacus placerat,
                dictum nulla quis, vehicula urna.
                Suspendisse dictum neque sapien,
                mollis semper quam tincidunt sit amet.
                Fusce ullamcorper, nisi id pharetra egestas,
                nisi libero ullamcorper mi,
                id consectetur enim arcu eget turpis.
                Fusce urna diam, elementum a diam non,
                efficitur tempus eros.
                Nam tincidunt orci vitae enim vulputate vehicula.
                Nullam commodo magna sed nulla efficitur,
                in gravida eros malesuada.
                Quisque vel turpis sed elit
                finibus luctus et sed leo.
                Etiam porta metus purus,
                in vulputate est accumsan a.
                Aenean pulvinar aliquam nunc,
                vel pharetra diam sodales in.
        authorId:
            type: string
            example: "196508c4-495f-4d2e-898b-776fb3c1e8b4"
        authorName:
            type: string
            example: "Ted Kaczynski"
        authorAvatar:
            type: string
            example: "https://placekitten.com/200/200"
        createdAt:
            type: string
            example: "2021-07-30 17:00:00 +0700"
        updatedAt:
            type: string
            example: "2021-07-30 17:00:00 +0700"
#+END_SRC

Ketika kita memasang ~security~ di dalam sebuah /operation/, maka operasi tersebut akan membutuhkan sebuah /access/ yang memadai, seperti /JWT/ atau apapun yang digunakan oleh API untuk mengautentikasi sebuah /request/.

** API Servers

Di dalam dokumentasi Open API, kita dapat mendefinisikan apa saja sih server yang menjalankan API tersebut. Untuk mendefinisikannya, kita dapat menggunakan atribut bernama ~servers~, di dalam /Open API object/.

#+BEGIN_SRC yaml
openapi: 3.0.0
info:
  title: Medium Blogging API
  version: 0.0.1
servers:
  - description: Mock Server
    url: https://mock.medium.com
  - description: "Staging Server"
    url: https://staging.medium.com
  - description: "Beta Server"
    url: https://beta.medium.com
  - description: "Production Server"
    url: https://medium.com
paths: {}
#+END_SRC

* Menampilkan Open API Documentation

Berikut ini adalah sebuah Open API Specification yang akan kita gunakan untuk menampilkan sebuah UI dari Open API Specification kita.

#+BEGIN_SRC yaml :tangle ./SOURCE/openapi.yaml
openapi: 3.0.0
info:
  title: Medium Blogging API
  version: 0.0.1
servers:
  - description: Mock Server
    url: https://mock.medium.com
  - description: "Staging Server"
    url: https://staging.medium.com
  - description: "Beta Server"
    url: https://beta.medium.com
  - description: "Production Server"
    url: https://medium.com
tags:
  - name: Post
    description: Contain every operation about Post Resource
paths:
  /posts:
    post:
      operationId: createPost
      tags:
      - Post
      requestBody:
        $ref: "#/components/requestBodies/PostRequest"
      responses:
        "201":
          $ref: "#/components/responses/PostResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
  /posts/{id}:
    put:
      operationId: updatePost
      tags:
      - Post
      parameters:
        - in: path
          name: id
          description: The id of the Post
          required: true
          schema:
            type: number
            example: 1
      requestBody:
        $ref: "#/components/requestBodies/PostRequest"
      responses:
        "200":
          $ref: "#/components/responses/PostResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "403":
          $ref: "#/components/responses/ForbiddenResponse"
components:
  requestBodies:
    PostRequest:
        description: Payload for making a Post
        required: true
        content:
            application/json:
                schema:
                    type: object
                    properties:
                        title:
                            type: string
                            example: Industrial Society and It's Future
                        body:
                            type: string
                            example: |
                                Lorem ipsum dolor sit amet,
                                consectetur adipiscing elit.
                                Nullam quis tristique dolor.
                                Donec at vehicula urna. Fusce nec lacus placerat,
                                dictum nulla quis, vehicula urna.
                                Suspendisse dictum neque sapien,
                                mollis semper quam tincidunt sit amet.
                                Fusce ullamcorper, nisi id pharetra egestas,
                                nisi libero ullamcorper mi,
                                id consectetur enim arcu eget turpis.
                                Fusce urna diam, elementum a diam non,
                                efficitur tempus eros.
                                Nam tincidunt orci vitae enim vulputate vehicula.
                                Nullam commodo magna sed nulla efficitur,
                                in gravida eros malesuada.
                                Quisque vel turpis sed elit
                                finibus luctus et sed leo.
                                Etiam porta metus purus,
                                in vulputate est accumsan a.
                                Aenean pulvinar aliquam nunc,
                                vel pharetra diam sodales in.
  responses:
    ForbiddenResponse:
      description: Response when accessing protected endpoint with access but sufficient access
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: FAIL
              data:
                type: object
                properties:
                  name:
                    type: string
                    example: "FORBIDDEN"
                  message:
                    type: string
                    example: "Invalid access level"
    UnauthorizedResponse:
      description: Response when accessing protected endpoint without access
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: FAIL
              data:
                type: object
                properties:
                  name:
                    type: string
                    example: "UNAUTHORIZED"
                  message:
                    type: string
                    example: "Access is not granted"
    PostResponse:
      description: Response when mutating and get individual Post.
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: OK
              data:
                $ref: "#/components/schemas/Post"
  schemas:
    Post:
      type: object
      properties:
        id:
            type: string
            example: "bdaf6814-2e99-40d5-9c15-e0238a90c886"
        title:
            type: string
            example: Industrial Society and It's Future
        body:
            type: string
            example: |
                Lorem ipsum dolor sit amet,
                consectetur adipiscing elit.
                Nullam quis tristique dolor.
                Donec at vehicula urna. Fusce nec lacus placerat,
                dictum nulla quis, vehicula urna.
                Suspendisse dictum neque sapien,
                mollis semper quam tincidunt sit amet.
                Fusce ullamcorper, nisi id pharetra egestas,
                nisi libero ullamcorper mi,
                id consectetur enim arcu eget turpis.
                Fusce urna diam, elementum a diam non,
                efficitur tempus eros.
                Nam tincidunt orci vitae enim vulputate vehicula.
                Nullam commodo magna sed nulla efficitur,
                in gravida eros malesuada.
                Quisque vel turpis sed elit
                finibus luctus et sed leo.
                Etiam porta metus purus,
                in vulputate est accumsan a.
                Aenean pulvinar aliquam nunc,
                vel pharetra diam sodales in.
        authorId:
            type: string
            example: "196508c4-495f-4d2e-898b-776fb3c1e8b4"
        authorName:
            type: string
            example: "Ted Kaczynski"
        authorAvatar:
            type: string
            example: "https://placekitten.com/200/200"
        createdAt:
            type: string
            example: "2021-07-30 17:00:00 +0700"
        updatedAt:
            type: string
            example: "2021-07-30 17:00:00 +0700"
#+END_SRC

** Swagger UI

#+ATTR_HTML: :width 100%
[[../../../assets/images/open-api/SWAGGER.png]]

Untuk menampilkan dokumentasi Open API ini sangat tergantung terhadap bahasa yang digunakan dari sebuah server. Untuk express, kita dapat menggunakan library [[https://www.npmjs.com/package/swagger-ui-express][swagger-ui-express]].

#+BEGIN_SRC js
const express = require('express');
const swaggerUi = require('swagger-ui-express');
const app = express();
const swaggerDocument = require('./swagger.json');

app.use('/api-docs', swaggerUi.serve, swaggerUi.setup(swaggerDocument));
#+END_SRC

Kode diatas membutuhkan file bernama ~swagger.json~, ini adalah nama dari file Open API Documentation yang sudah kalian buat, namun dalam format JSON. Kalau kalian ingin menggunakan versi YAML, maka ada beberapa library yang perlu kita instal agar kita dapat menggunakan file ~YAML~ kita.

#+BEGIN_SRC js :tangle ./SOURCE/swagger.js
const express = require('express');
const YAML = require('yamljs');
const swaggerUi = require('swagger-ui-express');

const app = express();
const swaggerDocument = YAML.load('./openapi.yaml');
const port = 3000;

app.use('/api-docs', swaggerUi.serve, swaggerUi.setup(swaggerDocument));

app.listen(port, () => console.log(`Example app listening on port ${port}!`));
#+END_SRC

Maka dokumentasi API-mu akan dapat diakses melalui server express pada /path/ ~/api-docs~.

** ReDoc

#+ATTR_HTML: :width 100%
[[../../../assets/images/open-api/REDOC.png]]

Untuk menggunakan ReDoc di dalam express, kita hanya perlu menginstal library bernama [[https://www.npmjs.com/package/redoc-express][redoc-express]]. Dan cara menggunakannya cukup sederhana.

#+BEGIN_SRC js :tangle ./SOURCE/redoc.js
const express = require('express');
const redoc = require('redoc-express');
const YAML = require('yamljs')
const openAPIDocument = YAML.load('./openapi.yaml')

const app = express();
const port = 3000;

// serve your swagger.json file
app.get('/docs/swagger.json', (req, res) => {
    res.status(200).json(openAPIDocument)
});

// define title and specUrl location
// serve redoc
app.get(
  '/docs',
  redoc({
    title: 'API Docs',
    specUrl: '/docs/swagger.json'
  })
);

app.listen(port, () => console.log(`Example app listening on port ${port}!`));
#+END_SRC

Ketika kalian membuka halaman ~/docs~, maka kalian akan melihat dokumentasi API kalian dengan UI dari Redoc.

* Membuat Mock API untuk Early Development

Untuk membuat Mock API sangatlah mudah, kalian hanya perlu:
1. Buka [[https://editor.swagger.io/][editor.swagger.io]]
2. Paste Open API Documentationmu
3. Generate Server
4. Pilih bahasa ~nodejs-server~
5. Download
6. Extract
7. ~npm start~

Server yang kamu jalankan akan dapat memenuhi kebutuhkan kontrak dari API yang sudah kamu definisikan, hal ini sangat berguna bagi developer frontend, karena mereka sudah bisa menggunakan Mock API kita untuk mengimplementasikan integrasi ke API.

* Kesimpulan

Open API Documentation sangat berguna dalam proses development, karena dengan adanya Open API documentation, kita dapat membuat Mock API secara otomatis, yang dapat menggantikan kebutuhan adanya API di dalam proses pengembangan website.

Dan juga, Open API documentation sangat berguna untuk mendokumentasikan setiap operasi yang dapat kita lakukan dengan menggunakan API yang kita dokumentasikan.

* Referensi

- [[https://oai.github.io/Documentation/][Open API Initiative]]
- [[https://swagger.io/docs/specification/about/][Swagger]]
